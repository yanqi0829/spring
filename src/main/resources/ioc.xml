<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!--    注册一个Person对象，Spring会自动创建这个Person对象-->
    <!--    abstract="true" 改配置只能被继承，无法获取到-->
    <!--    depends-on="person03" 原本是按着配置的顺序创建bean ，此属性改变创建顺序 *****************没什么实际作用***********-->
    <bean id="person01" class="own.code.bean.Person" abstract="true" depends-on="person03">
        <property name="age" value="18"></property>
        <property name="lastName" value="张三"></property>
        <property name="email" value="zhangsan@own.com"></property>
        <property name="gender" value="男"></property>
    </bean>
    <!--    有参数构造器赋值-->
    <bean id="person03" class="own.code.bean.Person">
        <constructor-arg name="age" value="19"></constructor-arg>
        <constructor-arg name="email" value="111@own.com"></constructor-arg>
        <constructor-arg name="gender" value="女"></constructor-arg>
        <constructor-arg name="lastName" value="小红"></constructor-arg>
        <!--可以省略name属性，严格按照构造器参数顺序 index type 不如一个name 好用
                <constructor-arg  value="19"></constructor-arg>
                <constructor-arg  value="111@own.com"></constructor-arg>
                <constructor-arg value="女"></constructor-arg>
                <constructor-arg  value="小红"></constructor-arg>-->
    </bean>
    <!--    通过p名称空间为bean赋值，导入p名称空间
        在xml中名称空间是用来防止标签重复的
        (1)导入p名称空间 （2）写带前缀的标签，属性
    -->
    <bean id="person04" class="own.code.bean.Person" p:age="18"></bean>

    <bean id="person05" class="own.code.bean.Person" parent="person01">
        <property name="lastName" value="丽思四"></property>
    </bean>

    <!--    静态工厂
            class:指定静态工厂全类名
             factory-method 指定工厂方法
             constructor-arg 可以为方法传参
    -->
    <bean id="airPlane01" class="own.code.bean.factory.AirPlaneStaticFactory"
          factory-method="getAirPlane">
        <constructor-arg value="静态工厂"></constructor-arg>
    </bean>
    <!--    实例工厂
            factory-bean：指定当前对象创建使用哪个工厂
             factory-method：使用的工厂方法
    -->
    <bean id="airPlaneInstanceFactory" class="own.code.bean.factory.AirPlaneInstanceFactory"
    ></bean>
    <bean id="airPlane02" class="own.code.bean.AirPlane" factory-bean="airPlaneInstanceFactory"
          factory-method="getAirPlane">
        <constructor-arg value="实例工厂"></constructor-arg>
    </bean>
    <!--    实现FactoryBean-->
    <bean id="airPlane03" class="own.code.bean.factory.MyFactoryBean"></bean>


    <bean id="book001" class="own.code.bean.Book" init-method="init" destroy-method="destory">
        <property name="name" value="12"></property>
    </bean>
    <!--    **实验8**：测试bean的后置处理器-->
    <bean id="beanPostProcessor" class="own.code.bean.MyBeanPostProcessor"></bean>

    <!--记载外部配置文件  固定写法 classpath: -->
    <context:property-placeholder location="classpath:*.properties" ignore-unresolvable="true"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${password}"/>
    </bean>
    <!--    自动扫描  Spring容器将会扫描这个基类包及其子包中的所有类,逗号分隔-->
    <context:component-scan base-package="own.code"/>
</beans>